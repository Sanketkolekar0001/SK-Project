import tkinter as tk
from tkinter import messagebox
import time
import logging
import os

# Configure logging
logging.basicConfig(filename='website_blocker.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s', filemode='a', encoding='utf-8')

class WebsiteBlockerApp:
    def __init__(self, master):
        self.master = master
        self.master.geometry('650x500')
        self.master.title("Website Blocker Manager")
        self.master.configure(bg='black')

        # Login variables
        self.username_var = tk.StringVar()
        self.password_var = tk.StringVar()

        self.logged_in = False

        # Check if the user is logged in
        self.check_login()

        if not self.logged_in:
            self.setup_login_ui()
        else:
            self.setup_ui()

    def check_login(self):
        # You may implement a more secure login mechanism
        # For simplicity, I'm using a hardcoded username and password
        if self.username_var.get() == "admin" and self.password_var.get() == "password":
            self.logged_in = True

    def setup_login_ui(self):
        tk.Label(self.master, text='Username:', font=('arial', 13, 'bold'), fg='white', bg='black').grid(row=0, column=0, padx=10, pady=10, sticky='e')
        tk.Entry(self.master, textvariable=self.username_var, font='arial', width=20).grid(row=0, column=1, padx=10, pady=10, sticky='w')

        tk.Label(self.master, text='Password:', font=('arial', 13, 'bold'), fg='white', bg='black').grid(row=1, column=0, padx=10, pady=10, sticky='e')
        tk.Entry(self.master, textvariable=self.password_var, show='*', font='arial', width=20).grid(row=1, column=1, padx=10, pady=10, sticky='w')

        tk.Button(self.master, text='Login', font=('arial', 12), pady=5, command=self.login, width=10, bg='blue', fg='white', activebackground='grey').grid(row=2, column=0, columnspan=2, pady=10)

    def login(self):
        self.check_login()
        if self.logged_in:
            # If login is successful, set up the main UI
            self.setup_ui()
        else:
            # If login fails, display an error message
            messagebox.showerror("Login Failed", "Invalid username or password")

    def setup_ui(self):
        # Labels and Entry Widgets
        tk.Label(self.master, text='Enter Websites (comma-separated):', font=('arial', 13, 'bold'), fg='white', bg='black').grid(row=0, column=0, padx=10, pady=10, sticky='e')
        self.enter_websites = tk.Text(self.master, font='arial', height=2, width=40)
        self.enter_websites.grid(row=0, column=1, padx=10, pady=10, sticky='w')

        tk.Label(self.master, text='Enter Duration (minutes):', font=('arial', 13, 'bold'), fg='white', bg='black').grid(row=1, column=0, padx=10, pady=10, sticky='e')
        self.enter_duration = tk.Entry(self.master, font='arial', width=10)
        self.enter_duration.grid(row=1, column=1, padx=10, pady=10, sticky='w')

        # Buttons
        tk.Button(self.master, text='Block', font=('arial', 12), pady=5, command=self.block_websites, width=10, bg='red', fg='white', activebackground='grey').grid(row=2, column=0, pady=10, padx=10, sticky='e')

        tk.Button(self.master, text='Unblock', font=('arial', 12), pady=5, command=self.unblock_websites, width=10, bg='green', fg='white', activebackground='grey').grid(row=2, column=1, pady=10, padx=10, sticky='w')

        # Listboxes to display blocked and user-managed websites
        self.blocked_websites = {'example.com', 'test.com', 'blocked.com'}
        self.blocked_listbox = tk.Listbox(self.master, selectmode=tk.SINGLE, font='arial', height=5, width=30, bg='black', fg='white', selectbackground='red')
        for blocked_website in self.blocked_websites:
            self.blocked_listbox.insert(tk.END, blocked_website)
        self.blocked_listbox.grid(row=3, column=1, padx=10, pady=10, sticky='w')

        self.user_listbox = tk.Listbox(self.master, selectmode=tk.SINGLE, font='arial', height=5, width=30, bg='black', fg='white', selectbackground='green')
        for blocked_website in self.blocked_websites:
            self.user_listbox.insert(tk.END, blocked_website)
        self.user_listbox.grid(row=3, column=0, padx=10, pady=10, sticky='e')

        # Message Label
        self.message_label = tk.Label(self.master, text='', font=('arial', 12), fg='white', bg='black')
        self.message_label.grid(row=4, column=0, columnspan=2, pady=10)

    def block_websites(self):
        websites_to_block = self.enter_websites.get(1.0, tk.END).split(',')
        duration = self.get_duration()

        for website in websites_to_block:
            website = website.strip()
            if website:
                if website not in self.blocked_websites:
                    self.blocked_websites.add(website)
                    self.update_listboxes()
                    self.display_message(f"{website} Blocked for {duration} minutes")
                    self.log_message(f"{website} Blocked for {duration} minutes")
                else:
                    self.display_message(f"{website} is Already Blocked")

        end_time = time.time() + duration * 60
        self.master.after(int(duration * 60 * 1000), lambda: self.unblock_websites(websites_to_block, end_time))

    def unblock_websites(self, websites, end_time):
        current_time = time.time()
        if current_time < end_time:
            self.master.after(int((end_time - current_time) * 1000), lambda: self.unblock_websites(websites, end_time))
        else:
            for website in websites:
                if website in self.blocked_websites:
                    self.blocked_websites.remove(website)
                    self.update_listboxes()
                    self.display_message(f"{website} Unblocked")
                    self.log_message(f"{website} Unblocked")

    def update_listboxes(self):
        self.blocked_listbox.delete(0, tk.END)
        self.user_listbox.delete(0, tk.END)
        for blocked_website in self.blocked_websites:
            self.blocked_listbox.insert(tk.END, blocked_website)
            self.user_listbox.insert(tk.END, blocked_website)

    def display_message(self, msg):
        self.message_label.config(text=msg)

    def log_message(self, msg):
        logging.info(msg)

    def get_duration(self):
        try:
            duration = int(self.enter_duration.get())
            if duration <= 0:
                raise ValueError("Duration must be a positive integer.")
            return duration
        except ValueError as e:
            messagebox.showerror("Error", str(e))
            return 0

if __name__ == "__main__":
    root = tk.Tk()
    app = WebsiteBlockerApp(root)
    root.mainloop()
